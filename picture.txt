import cv2
import numpy as np
#1 inital process
# read image
original_img = cv2.imread('3.png')
img = cv2.bitwise_not(original_img)

# convert to grayscale
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

# threshold and invert so image is white on black background
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY+cv2.THRESH_OTSU)[1]
thresh = 255 - thresh

#2 remove dots in outlayers
im = thresh

# do connected components processing
nlabels, labels, stats, centroids = cv2.connectedComponentsWithStats(im, None, None, None, 8, cv2.CV_32S)

#get CC_STAT_AREA component as stats[label, COLUMN]
areas = stats[1:,cv2.CC_STAT_AREA]

result1 = np.zeros((labels.shape), np.uint8)

for i in range(0, nlabels - 1):
    if areas[i] >= 100:   #keep
        result1[labels == i + 1] = 255

#3 remove petiole
# Create an output of all zeroes that has the same shape as the input image
contours, hierarchy = cv2.findContours(result1.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

out = np.zeros_like(result1)

im2 = cv2.fillPoly(result1, pts =contours, color=(255,255,255))

dist_transform = cv2.distanceTransform(im2,cv2.DIST_L2,5)

ret, petiole = cv2.threshold(dist_transform,0.05*dist_transform.max(),255,0)

petiole = np.uint8(petiole)

#4 final process
contours2, hierarchy2 = cv2.findContours(petiole.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

out2 = np.zeros_like(petiole)

cv2.drawContours(out2, contours2, -1, 255, 1)

# 5 Spawn new windows that shows the result
# (in grayscale) and the detected contour

cv2.imshow("Original", original_img)
#cv2.imshow("Processed", im)
cv2.imshow("Dot_removal", result1)
#cv2.imshow("Result", out)
#cv2.imshow("Result", petiole)
cv2.imshow('Final Outcome', out2)

# Wait indefinitely until you push a key.  Once you do, close the windows
cv2.waitKey(0)
cv2.destroyAllWindows()

# 6 write csv
cntr = contours2[0]
for pt in cntr:
    print(pt)

a = [item for sublist in cntr for item in sublist]
a
#np.savetxt('foo.csv', a, delimiter=",")